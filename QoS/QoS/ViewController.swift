//
//  ViewController.swift
//  QoS
//
//  Created by Anton Rubenchik on 09.08.2018.
//  Copyright ¬© 2018 Anton Rubenchik. All rights reserved.
//

import UIKit

class ViewController: UIViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

//        simpleGlobalAsyncQueue()
//        globalQueueWithDifferentQoS() // –≤—Å–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ¬†, –∫—Ä–æ–º–µ main
//        customSerialQueue()   // Apple - –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
//        customConcurrentQueue() // plApe - –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
//        customConcurrentQueueSync() // Apple - –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –Ω–æ sync, –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É
    }
    
    // 1 –í—ã–≤–µ–ª–∏ –≤ –∑–∞–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏. –û–Ω–æ –º–æ–≥–ª–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
    func simpleGlobalAsyncQueue() {
        DispatchQueue.global().async {
            for _ in 0...9 {
                print("üòá")
            }
        }
    }
    
    //2 –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ –æ—á–µ—Ä–µ–¥–µ–π, —Å —Ä–∞–∑–Ω—ã–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    func globalQueueWithDifferentQoS() {
        
        DispatchQueue.global(qos: .background).async {
            sleep(1)
            for _ in 0...99 {
                print("background")
            }
        }
        
        DispatchQueue.global(qos: .utility).async {
            sleep(1)
            for _ in 0...99 {
                print("utility")
            }
        }
        
        DispatchQueue.global(qos: .default).async {
            sleep(1)
            for _ in 0...99 {
                print("default")
            }
        }
        
        DispatchQueue.global(qos: .userInitiated).async {
            sleep(1)
            for _ in 0...99 {
                print("userInitiated")
            }
        }
        
        DispatchQueue.global(qos: .userInteractive).async {
            sleep(1)
            for _ in 0...99 {
                print("userInteractive")
            }
        }
        // –≤—ã–≤–æ–¥ –ø–µ—Ä–≤—ã–º, —Ç–∞–∫ –∫–∞–∫ main
        DispatchQueue.main.async {
            for _ in 0...99 {
                print("üòá")
            }
        }
    }
    
    func customSerialQueue() {
        let serialQueue = DispatchQueue(label: "First")
        serialQueue.async {
            print("A")
        }
        
        serialQueue.async {
            print("p")
        }
        
        serialQueue.async {
            print("p")
        }
        
        serialQueue.async {
            print("l")
        }
        
        serialQueue.async {
            print("e")
        }
    }
    
    //4
    func customConcurrentQueue() {
        let concurrentQueue = DispatchQueue(label: "Second",
                                            qos: .background,
                                            attributes: .concurrent,
                                            autoreleaseFrequency: .inherit,
                                            target: .global(qos: .background))
        concurrentQueue.async {
            
            print("A")
        }
        
        concurrentQueue.async {
            
            print("p")
        }
        
        concurrentQueue.async {
            print("p")
        }
        
        concurrentQueue.async {
            print("l")
        }
        
        concurrentQueue.async {
            print("e")
            
        }
    }
    
    // 5
    func customConcurrentQueueSync()
    {
        let concurrentQueue = DispatchQueue(label: "Second",
                                            qos: .userInitiated,
                                            attributes: .concurrent,
                                            autoreleaseFrequency: .inherit,
                                            target: .global(qos: .userInitiated))
        concurrentQueue.sync {
            
            print("A")
        }
        
        concurrentQueue.sync {
            
            print("p")
        }
        
        concurrentQueue.sync {
            print("p")
        }
        
        concurrentQueue.sync {
            print("l")
        }
        
        concurrentQueue.sync {
            print("e")
            
        }
        
    }
}

